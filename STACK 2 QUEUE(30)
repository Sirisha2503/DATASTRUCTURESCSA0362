#include <stdio.h>
#include <stdlib.h>
struct StackNode {
    int data;
    struct StackNode* next;
};
struct Stack {
    struct StackNode* top;
};
struct Queue {
    struct Stack* stack1;
    struct Stack* stack2;
};
struct Stack* createStack() {
    struct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack));
    stack->top = NULL;
    return stack;
}
struct StackNode* createNode(int data) {
    struct StackNode* node = (struct StackNode*)malloc(sizeof(struct StackNode));
    node->data = data;
    node->next = NULL;
    return node;
}
void push(struct Stack* stack, int data) {
    struct StackNode* newNode = createNode(data);
    newNode->next = stack->top;
    stack->top = newNode;
}
int pop(struct Stack* stack) {
    if (stack->top == NULL) {
        printf("Stack is empty.\n");
        return -1;
    }
    struct StackNode* temp = stack->top;
    stack->top = stack->top->next;
    int data = temp->data;
    free(temp);
    return data;
}
void enqueue(struct Queue* queue, int data) {
    push(queue->stack1, data);
}
int dequeue(struct Queue* queue) {
    if (queue->stack1->top == NULL && queue->stack2->top == NULL) {
        printf("Queue is empty.\n");
        return -1;
    }
    if (queue->stack2->top == NULL) {
        while (queue->stack1->top != NULL) {
            int data = pop(queue->stack1);
            push(queue->stack2, data);
        }
    }
    return pop(queue->stack2);
}
int main() {
    struct Queue* queue = (struct Queue*)malloc(sizeof(struct Queue));
    queue->stack1 = createStack();
    queue->stack2 = createStack();
    enqueue(queue, 10);
    enqueue(queue, 20);
    enqueue(queue, 30);
    printf("Dequeued: %d\n", dequeue(queue));
    printf("Dequeued: %d\n", dequeue(queue));
    printf("Dequeued: %d\n", dequeue(queue));
    return 0;
}
