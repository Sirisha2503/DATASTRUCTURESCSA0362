#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#define MAX_VERTICES 50
struct Node 
{
    int data;
    struct Node* next;
};
struct Graph
{
    int V;
    struct Node* adjacencyList[MAX_VERTICES];
};
struct Graph* createGraph(int V)
{
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->V = V;
    for (int i = 0; i < V; i++) 
	{
        graph->adjacencyList[i] = NULL;
    }
    return graph;
}
void addEdge(struct Graph* graph, int src, int dest) 
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = dest;
    newNode->next = graph->adjacencyList[src];
    graph->adjacencyList[src] = newNode;
}
void BFS(struct Graph* graph, int startVertex)
 {
    bool visited[MAX_VERTICES] = {false};
    int queue[MAX_VERTICES];
    int front = 0, rear = 0;
    visited[startVertex] = true;
    queue[rear++] = startVertex;
    while (front < rear)
	 {
        int currentVertex = queue[front++];
        printf("%d ", currentVertex);
        struct Node* temp = graph->adjacencyList[currentVertex];
        while (temp != NULL)
		 {
            int adjacentVertex = temp->data;
            if (!visited[adjacentVertex]) 
			{
                visited[adjacentVertex] = true;
                queue[rear++] = adjacentVertex;
            }
            temp = temp->next;
        }
    }
}
int main()
 {
    struct Graph* graph = createGraph(6);
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 1, 4);
    addEdge(graph, 2, 4);
    addEdge(graph, 3, 5);
    addEdge(graph, 4, 5);
    printf("Breadth First Traversal starting from vertex 0:\n");
    BFS(graph, 0);
    printf("\n");
    return 0;
}
