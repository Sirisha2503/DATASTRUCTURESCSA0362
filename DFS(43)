#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#define MAX_VERTICES 50
struct Node {
    int data;
    struct Node* next;
};
struct Graph {
    int V;
    struct Node* adjacencyList[MAX_VERTICES];
};
struct Graph* createGraph(int V) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->V = V;
    for (int i = 0; i < V; i++) {
        graph->adjacencyList[i] = NULL;
    }
    return graph;
}
void addEdge(struct Graph* graph, int src, int dest) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = dest;
    newNode->next = graph->adjacencyList[src];
    graph->adjacencyList[src] = newNode;
}
void DFSUtil(struct Graph* graph, int vertex, bool visited[]) {
    visited[vertex] = true;
    printf("%d ", vertex);
    struct Node* temp = graph->adjacencyList[vertex];
    while (temp != NULL) {
        int adjacentVertex = temp->data;
        if (!visited[adjacentVertex]) {
            DFSUtil(graph, adjacentVertex, visited);
        }
        temp = temp->next;
    }
}
void DFS(struct Graph* graph, int startVertex) {
    bool visited[MAX_VERTICES] = {false};
    DFSUtil(graph, startVertex, visited);
}
int main() {
    struct Graph* graph = createGraph(7);
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 1, 4);
    addEdge(graph, 2, 5);
    addEdge(graph, 2, 6);
    printf("Depth First Traversal starting from vertex 0:\n");
    DFS(graph, 0);
    printf("\n");
    return 0;
}
